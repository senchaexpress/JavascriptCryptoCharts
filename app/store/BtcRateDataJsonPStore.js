/*
 * File: app/store/BtcRateDataJsonPStore.js
 *
 * This file was generated by Sencha Architect version 4.2.9.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.3.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.3.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Demo.store.BtcRateDataJsonPStore', {
    extend: 'Ext.data.Store',
    alias: 'store.BtcRateDataStore',

    alternateClassName: [
        'btcratedatastore'
    ],
    requires: [
        'Demo.model.HomeModel',
        'Ext.data.proxy.JsonP',
        'Ext.data.reader.Json',
        'Ext.data.field.Number'
    ],

    constructor: function(cfg) {
        var me = this;
        cfg = cfg || {};
        me.callParent([Ext.apply({
            storeId: 'BtcRateDataJsonPStore',
            model: 'Demo.model.HomeModel',
            proxy: {
                type: 'jsonp',
                extraParams: {
                    access_key: '94ba88431b0310b32ddc1af867f90a57',
                    start_date: '2020-01-01',
                    end_date: '2020-12-31',
                    target: 'USD',
                    symbols: 'BTC',
                    expand: 1
                },
                url: 'https://api.coinlayer.com/timeframe',
                reader: {
                    type: 'json',
                    transform: function(data) {
                        // console.log("response", data);
                        var newData = [];
                        var rates = data.rates;
                        var dates = Object.keys(rates);
                        var firstDate = dates[0];
                        var nextOpen = rates[firstDate].BTC.rate || 0; // init

                        // adjust for 07-21;
                        if(rates["2020-07-21"]) {
                            var tempRate = rates["2020-07-21"];
                            if(tempRate.BTC && tempRate.BTC.high > 100000) {
                                tempRate.BTC.high = (tempRate.BTC.high) / 100;
                            }
                            console.log("tempRate", tempRate);
                            rates["2020-07-21"] = tempRate;
                        }

                        newData = dates.map((date) => {
                            var btc = rates[date].BTC;
                            btc.date = new Date(date).getTime();
                            btc.close = nextOpen;
                            nextOpen = btc.rate;

                            return btc;
                        });
                        // console.log("newData", newData);
                        return newData;
                    }
                }
            },
            fields: [
                {
                    type: 'float',
                    name: 'rate'
                },
                {
                    type: 'float',
                    name: 'sup'
                },
                {
                    type: 'float',
                    name: 'high'
                },
                {
                    type: 'float',
                    name: 'low'
                },
                {
                    type: 'float',
                    name: 'vol'
                },
                {
                    type: 'float',
                    name: 'cap'
                },
                {
                    type: 'int',
                    name: 'date'
                },
                {
                    type: 'float',
                    name: 'close'
                }
            ]
        }, cfg)]);
    }
});